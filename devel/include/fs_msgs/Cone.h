// Generated by gencpp from file fs_msgs/Cone.msg
// DO NOT EDIT!


#ifndef FS_MSGS_MESSAGE_CONE_H
#define FS_MSGS_MESSAGE_CONE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace fs_msgs
{
template <class ContainerAllocator>
struct Cone_
{
  typedef Cone_<ContainerAllocator> Type;

  Cone_()
    : location()
    , color(0)  {
    }
  Cone_(const ContainerAllocator& _alloc)
    : location(_alloc)
    , color(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _location_type;
  _location_type location;

   typedef uint8_t _color_type;
  _color_type color;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(BLUE)
  #undef BLUE
#endif
#if defined(_WIN32) && defined(YELLOW)
  #undef YELLOW
#endif
#if defined(_WIN32) && defined(ORANGE_BIG)
  #undef ORANGE_BIG
#endif
#if defined(_WIN32) && defined(ORANGE_SMALL)
  #undef ORANGE_SMALL
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif

  enum {
    BLUE = 0u,
    YELLOW = 1u,
    ORANGE_BIG = 2u,
    ORANGE_SMALL = 3u,
    UNKNOWN = 4u,
  };


  typedef boost::shared_ptr< ::fs_msgs::Cone_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fs_msgs::Cone_<ContainerAllocator> const> ConstPtr;

}; // struct Cone_

typedef ::fs_msgs::Cone_<std::allocator<void> > Cone;

typedef boost::shared_ptr< ::fs_msgs::Cone > ConePtr;
typedef boost::shared_ptr< ::fs_msgs::Cone const> ConeConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fs_msgs::Cone_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fs_msgs::Cone_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fs_msgs::Cone_<ContainerAllocator1> & lhs, const ::fs_msgs::Cone_<ContainerAllocator2> & rhs)
{
  return lhs.location == rhs.location &&
    lhs.color == rhs.color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fs_msgs::Cone_<ContainerAllocator1> & lhs, const ::fs_msgs::Cone_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fs_msgs::Cone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fs_msgs::Cone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fs_msgs::Cone_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fs_msgs::Cone_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fs_msgs::Cone_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fs_msgs::Cone_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fs_msgs::Cone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce1c29c0358a1a503b00a09580fddb69";
  }

  static const char* value(const ::fs_msgs::Cone_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce1c29c0358a1a50ULL;
  static const uint64_t static_value2 = 0x3b00a09580fddb69ULL;
};

template<class ContainerAllocator>
struct DataType< ::fs_msgs::Cone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fs_msgs/Cone";
  }

  static const char* value(const ::fs_msgs::Cone_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fs_msgs::Cone_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point location #x,y,z [m] wrt to the car start location (origin)\n"
"uint8 color # use the enum below\n"
"# Constants\n"
"uint8 BLUE=0\n"
"uint8 YELLOW=1\n"
"uint8 ORANGE_BIG=2\n"
"uint8 ORANGE_SMALL=3\n"
"uint8 UNKNOWN=4\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::fs_msgs::Cone_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fs_msgs::Cone_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.location);
      stream.next(m.color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Cone_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fs_msgs::Cone_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fs_msgs::Cone_<ContainerAllocator>& v)
  {
    s << indent << "location: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    s << indent << "color: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FS_MSGS_MESSAGE_CONE_H
