// Generated by gencpp from file fs_msgs/ExtraInfo.msg
// DO NOT EDIT!


#ifndef FS_MSGS_MESSAGE_EXTRAINFO_H
#define FS_MSGS_MESSAGE_EXTRAINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fs_msgs
{
template <class ContainerAllocator>
struct ExtraInfo_
{
  typedef ExtraInfo_<ContainerAllocator> Type;

  ExtraInfo_()
    : doo_counter(0)
    , laps()  {
    }
  ExtraInfo_(const ContainerAllocator& _alloc)
    : doo_counter(0)
    , laps(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _doo_counter_type;
  _doo_counter_type doo_counter;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _laps_type;
  _laps_type laps;





  typedef boost::shared_ptr< ::fs_msgs::ExtraInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fs_msgs::ExtraInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ExtraInfo_

typedef ::fs_msgs::ExtraInfo_<std::allocator<void> > ExtraInfo;

typedef boost::shared_ptr< ::fs_msgs::ExtraInfo > ExtraInfoPtr;
typedef boost::shared_ptr< ::fs_msgs::ExtraInfo const> ExtraInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fs_msgs::ExtraInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fs_msgs::ExtraInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fs_msgs::ExtraInfo_<ContainerAllocator1> & lhs, const ::fs_msgs::ExtraInfo_<ContainerAllocator2> & rhs)
{
  return lhs.doo_counter == rhs.doo_counter &&
    lhs.laps == rhs.laps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fs_msgs::ExtraInfo_<ContainerAllocator1> & lhs, const ::fs_msgs::ExtraInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fs_msgs::ExtraInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fs_msgs::ExtraInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fs_msgs::ExtraInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fs_msgs::ExtraInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fs_msgs::ExtraInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fs_msgs::ExtraInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fs_msgs::ExtraInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "722e1c6d60f33a21de73c32b7583c9b8";
  }

  static const char* value(const ::fs_msgs::ExtraInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x722e1c6d60f33a21ULL;
  static const uint64_t static_value2 = 0xde73c32b7583c9b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::fs_msgs::ExtraInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fs_msgs/ExtraInfo";
  }

  static const char* value(const ::fs_msgs::ExtraInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fs_msgs::ExtraInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The number of Down Or Out cones during the run\n"
"uint32 doo_counter\n"
"\n"
"# The number of finished laps driven by the vehicle\n"
"float32[] laps \n"
;
  }

  static const char* value(const ::fs_msgs::ExtraInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fs_msgs::ExtraInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.doo_counter);
      stream.next(m.laps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExtraInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fs_msgs::ExtraInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fs_msgs::ExtraInfo_<ContainerAllocator>& v)
  {
    s << indent << "doo_counter: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.doo_counter);
    s << indent << "laps[]" << std::endl;
    for (size_t i = 0; i < v.laps.size(); ++i)
    {
      s << indent << "  laps[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.laps[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FS_MSGS_MESSAGE_EXTRAINFO_H
