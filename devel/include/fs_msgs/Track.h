// Generated by gencpp from file fs_msgs/Track.msg
// DO NOT EDIT!


#ifndef FS_MSGS_MESSAGE_TRACK_H
#define FS_MSGS_MESSAGE_TRACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fs_msgs/Cone.h>

namespace fs_msgs
{
template <class ContainerAllocator>
struct Track_
{
  typedef Track_<ContainerAllocator> Type;

  Track_()
    : track()  {
    }
  Track_(const ContainerAllocator& _alloc)
    : track(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::fs_msgs::Cone_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fs_msgs::Cone_<ContainerAllocator> >::other >  _track_type;
  _track_type track;





  typedef boost::shared_ptr< ::fs_msgs::Track_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fs_msgs::Track_<ContainerAllocator> const> ConstPtr;

}; // struct Track_

typedef ::fs_msgs::Track_<std::allocator<void> > Track;

typedef boost::shared_ptr< ::fs_msgs::Track > TrackPtr;
typedef boost::shared_ptr< ::fs_msgs::Track const> TrackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fs_msgs::Track_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fs_msgs::Track_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fs_msgs::Track_<ContainerAllocator1> & lhs, const ::fs_msgs::Track_<ContainerAllocator2> & rhs)
{
  return lhs.track == rhs.track;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fs_msgs::Track_<ContainerAllocator1> & lhs, const ::fs_msgs::Track_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::fs_msgs::Track_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fs_msgs::Track_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fs_msgs::Track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fs_msgs::Track_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fs_msgs::Track_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fs_msgs::Track_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fs_msgs::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "03d754d3091336842daac1a974511950";
  }

  static const char* value(const ::fs_msgs::Track_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x03d754d309133684ULL;
  static const uint64_t static_value2 = 0x2daac1a974511950ULL;
};

template<class ContainerAllocator>
struct DataType< ::fs_msgs::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fs_msgs/Track";
  }

  static const char* value(const ::fs_msgs::Track_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fs_msgs::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fs_msgs/Cone[] track\n"
"================================================================================\n"
"MSG: fs_msgs/Cone\n"
"geometry_msgs/Point location #x,y,z [m] wrt to the car start location (origin)\n"
"uint8 color # use the enum below\n"
"# Constants\n"
"uint8 BLUE=0\n"
"uint8 YELLOW=1\n"
"uint8 ORANGE_BIG=2\n"
"uint8 ORANGE_SMALL=3\n"
"uint8 UNKNOWN=4\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::fs_msgs::Track_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fs_msgs::Track_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.track);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Track_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fs_msgs::Track_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fs_msgs::Track_<ContainerAllocator>& v)
  {
    s << indent << "track[]" << std::endl;
    for (size_t i = 0; i < v.track.size(); ++i)
    {
      s << indent << "  track[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fs_msgs::Cone_<ContainerAllocator> >::stream(s, indent + "    ", v.track[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FS_MSGS_MESSAGE_TRACK_H
